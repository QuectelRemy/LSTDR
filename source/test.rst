测试
=====

一般要求
~~~~~~~~~

- 原则一：在原有测试用例不足以达到软件测试要求时，必须及时提交新的用例。

  - 例1：新功能开发完成后，原有测试用例不能测试其功能、性能以及稳定性等特性，必须及时提交新的用例。

  - 例2：在实际使用时，发现了一个软件缺陷。在修复的同时，必须及时提交新的用例。

- 原则二：测试用例需要在代码提交时一同提交。

白盒测试
~~~~~~~~~

白盒测试用于测试软件的内部结构、软件设计和软件编码来验证软件输入输出流的正确性。依据测试结果，改进软件设计缺陷、提高软件可用性及安全性。

白盒测试的测试方法有代码检查法、静态结构分析法、静态质量度量法、逻辑覆盖法、基本路径测试法、域测试、符号测试、路径覆盖和程序变异。

白盒测试法的覆盖标准有逻辑覆盖、循环覆盖和基本路径测试。其中逻辑覆盖包括语句覆盖、判定覆盖、条件覆盖、判定/条件覆盖、条件组合覆盖和路径覆盖。六种覆盖标准发现错误的能力呈由弱到强的变化：

1. 语句覆盖每条语句至少执行一次。
#. 判定覆盖每个判定的每个分支至少执行一次。
#. 条件覆盖每个判定的每个条件应取到各种可能的值。
#. 判定/条件覆盖同时满足判定覆盖条件覆盖。
#. 条件组合覆盖每个判定中各条件的每一种组合至少出现一次。
#. 路径覆盖使程序中每一条可能的路径至少执行一次。

在实际编写测试用例时，应尽量考虑以上内容，尽可能全地测试你的代码。

单元测试
--------

依托 Unity 单元测试框架，进行函数级别粒度测试。

- 原则一：测试用例需要覆盖每一个函数。

- 原则二：涉及动态内存分配时，需要进行内存泄露测试。

- 原则三：函数入参中有指针时，需要进行空指针测试。

- 原则四：函数入参有限定范围时，需要进行上下限测试。

模块测试
--------

在单元测试的基础上，进行简单的模块测试。一般按照正确的调用关系使用功能模块。

- 原则一：应该覆盖常见使用场景。
- 原则二：适当测试其健壮性。如错误接口调用场景：未初始化时使用重要接口。

黑盒测试
~~~~~~~~~

系统测试
--------

这里的系统测试可以分为两种情况：一是基于 Linux 硬件抽象软件的测试，独立于硬件；二是特定软硬件平台上的测试。

AT指令测试
----------

回归测试
~~~~~~~~~

回归测试是指修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误。自动回归测试将大幅降低系统测试、维护升级等阶段的成本。

- 原则一：根据影响范围，适当进行。
- 原则二：应当覆盖所有的测试用例。
